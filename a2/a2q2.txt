/**
 * Tyrel Kostyk
 * tck290
 * 11216033
 *
 * CMPT 270
 * Assignment 2, Question 1
 */

****************** Application One: Flight Reservation System ******************

Design Notes:
- 	The LocalDate and LocalTime objects pulled from the java.time library
-	The Trip class subclasses the Flight class, and every plan that a passenger
	can book is contained in a Trip class; even a single flight.

Class Flight
	Attributes:
		# timing
		boardingTime:	LocalTime	# java.time.LocalTime
		departureTime:	LocalTime	# java.time.LocalTime
		arrivalTime: 	LocalTime	# java.time.LocalTime

		# geographic info (assuming airports can be indexed by a String)
		departingAirport:	String
		arrivinfAirport:	String

		# every flight is tied to a single "booking" passenger, who can also
		# connect their family on the flight
		tripOwner:			Passenger
		tripParticipants:	Arrays (of Passenger objects)

		# flight status variables
		flightConfirmed:	bool
		flightStatus:		String	# boarding, departed, etc

		# plane for the flight
		flightPlane:	Plane

	Methods:
		getItinerary		# calculate and return full trip itinerary

		getCost				# return the full price of the flight
		confirmAndPay		# confirm and pay for the flight
		cancelFlight		# cancel the flight
		isConfirmed			# whether the trip is confirmed (and paid for)

		selectSeat			# select a seat

[end of Flight Class]

Class Trip extends Flight
	Attributes:
		# flights
		# Trip objects always hold a list of flights, represented by an Arrays
		# object full of Flight objects, meant to behave like a linked list
		flightList:	Arrays (of Flight objects)

	Methods:
		getItinerary		# calculate and return full trip itinerary (overrides Flight method)
		validateItinerary	# confirm that there are no conflicts (time, etc)

		addConnectingFlight		# add a connecting flight to the trip
		removeConnectingFlight	# remove a connecting flight from the trip

		getTripCost				# return the full price breakdown of the trip
		confirmAndPayForTrip	# confirm and pay for the trip (aka every flight)
		cancelEntireTrip		# cancel the entire trip (aka every flight)
[end of Trip Class]

Class Plane
	Attributes:
		# features of the plane
		planeModel:					String
		economySeatsAvailable:		int
		businessSeatsAvailable:		int
		firstClassSeatsAvailable:	int

		# status of the plane
		planeStatus:	String	# needs minor repairs, out of commission, etc
[end of Plane Class]

Class Passenger
	Attributes:
		# personal information
		firstName:		String
		lastName:		String
		dateOfBirth:	LocalDate
		age:			int
		sex:			String
		citizenship:	String	# country the passenger is an official citizen of

		rewardsPoints:	int

		upcomingTrips:	Arrays (of Trip objects)
		previousTrips:	Arrays (of Trip objects)

	Methods:
		bookATrip	# start a new trip (i.e. book new flight(s))
		getUpcomingTrips	# display upcoming trips
		getPreviousTrips	# display old trips

		redeemRewardsPoints	# redeem rewards points as money towards a trip
[end of Passenger class]


********************** Application Two: A Doggie Daycare ***********************

Class Owner:
	Attributes:
		# personal information
		firstName:		String
		lastName:		String
		dateOfBirth:	LocalDate
		age:			int
		phoneNumber:	String

		upcomingVisits:	Arrays (of Visit objects)
		previousVisits:	Arrays (of Visit objects)

		registeredPets: Arrays (of Pet objects)

	Methods:
		registerPet	# creates and adds a Pet object to registeredPets
		removePet	# deletes Pet object from registeredPets

		# note: the following also calls the same method for the specified pet
		bookVisit	# creates, adds a visit object to upcomingVisits
		cancelVisit	# deletes a Visit object to upcomingVisits

		updatePersonalInformation	# update Owner information
		updatePetInformation		# update Owner's Pet information
[end of class Owner]

Class Pet:
	Attributes:
		# general information
		species:	String	# species of the pet
		breed:	String		# name of the pet's breed
		name:	String		# name of the pet
		age:	int			# how old the pet is
		gender:	String		# gender of the pet

		# additional information
		temperament:	String	# an owner-submitted claim of the pet's temperment
								# and behaviour (e.g. "very calm", "territorial", etc)
		restrictions:	String	# dietary or allergy restrictions, etc

		owner:	Owner object	# official owner of the pet
		currentStatus:	String	# checked in, awaiting pickup, etc

		upcomingVisits:	Arrays (of Visit objects)
		previousVisits:	Arrays (of Visit objects)

	Methods:
		updateInformation
		updateTemperament
		updateStatus
		setOwner

		addVisit
		cancelVisit
[end of Pet Class]

Class Daycare:
	Attributes:
		# generalInformation
		address:		String
		phoneNumber:	String

		maxPetCount:		Int
		currentPetCount:	Int

	Methods:
		setMaxPetCount
		incrementPetCount
		decrementPetCount

[end of Daycare Class]

Class Staff:
	Attributes:
		# general information
		firstName:		String
		lastName:		String
		dateOfBirth:	LocalDate
		age:			int
		phoneNumber:	String

		scheduledVisits:	Arrays (of Visit objects)
		completedVisits:	Arrays (of Visit objects)

	Methods:
		setInformation

		scheduleVisit
		completeVisit

[end of Staff Class]

Class Visit:
	Attributes:
		# pet, owner, and staff that this visit involves
		pet:	Pet
		owner:	Owner
		assignedStaff:	Staff

		# visit information
		checkInTime:	LocalTime
		checkOutTime:	LocalTime
		visitStatus:	String

		# design note: in practice, the following would likely use a custom typedef, not bool
		visitLength:	bool	# true is full day, false is half day
		visitTime:		bool	# true is morning, false is afternoon

	Methods:
		# basic setters
		setPet
		setOwner
		setStaff

		# visit status methods
		checkPetIn			# check the associated Pet in (calls updateVisitStatus, and incrementPetCount)
		checkPetOut			# check the associated Pet out (calls updateVisitStatus, and decrementPetCount)
		updateVisitStatus	# update the general status of the Visit

		requestPetPickUp	# call the Owner's phoneNumber to tell them their furry friend is ready to leave!

[end of class Visit]


********************* Application Three: An Emergency Room *********************

Class Ward:
	Attributes:

	Methods:

[end of Ward Class]

Class Bed:
	Attributes:

	Methods:

[end of Bed Class]

Class Doctor:
	Attributes:

	Methods:

[end of Doctor Class]

Class Patient:
	Attributes:

	Methods:

[end of Patient Class]
